"""
API modul pro pr√°ci s fotovoltaick√Ωmi panely, zpracov√°n√≠ nahran√Ωch soubor≈Ø,
spr√°vu MQTT nastaven√≠ a komunikaci s datab√°z√≠.

Vstup: JSON data pro FVE panely, soubory s historick√Ωmi daty (CSV, XLSX).
V√Ωstup: Aktualizovan√° datab√°ze, odpovƒõdi na API po≈æadavky.
Spolupracuje s: database, mqttListener.
"""

# üì¶ Standardn√≠ knihovny
import base64
import logging
from datetime import datetime, timedelta
from typing import List, Optional

# üåê Extern√≠ knihovny
import pandas as pd
import httpx
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

# üìÅ Lok√°ln√≠ moduly
import database
import mqttListener

# üõ†Ô∏è Logging
enableLogging = 1
logger = logging.getLogger(__name__)
if enableLogging:
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üöÄ FastAPI router
router = APIRouter()

# üìë Glob√°ln√≠ konstanty
requiredColumns = {"date", "hour", "consumption", "temperature", "fveProduction"}


# üß© MODELY -----------------------------------------------------------------------

class FveData(BaseModel):
    """Model pro jedno FVE pole"""
    id: Optional[int] = None
    latitude: float
    longitude: float
    tilt: float
    azimuth: float
    power: float


class SolarParams(BaseModel):
    """Model pro import v√≠ce FVE pol√≠"""
    fveFields: List[FveData]


class FileUploadModel(BaseModel):
    """Model pro p≈ôenos souboru"""
    filename: str
    filedata: str  # base64 string


class ProcessFileModel(BaseModel):
    filename: str
    filedata: str


class MqttSettingsModel(BaseModel):
    """Model pro MQTT nastaven√≠"""
    broker: str
    port: int
    topic: str
    username: str
    password: str


class SettingItem(BaseModel):
    id: int
    value: str


# üì§ UPLOAD A ZPRACOV√ÅN√ç SOUBOR≈Æ -------------------------------------------------

@router.post("/upload/")
async def uploadFile(file: FileUploadModel):
    """P≈ôed√° nahran√Ω soubor endpointu pro zpracov√°n√≠"""
    if enableLogging:
        logger.info(f"üìÇ P≈ôij√≠m√°m soubor {file.filename}")

    async with httpx.AsyncClient() as client:
        response = await client.post(
            "http://127.0.0.1:8000/process-file/",
            json={"filename": file.filename, "filedata": file.filedata}
        )

    if response.status_code == 200:
        if enableLogging:
            logger.info(f"‚úÖ Soubor {file.filename} √∫spƒõ≈°nƒõ zpracov√°n!")
    else:
        if enableLogging:
            logger.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ souboru: {response.text}")

    return response.json()


@router.post("/process-file/")
async def processUploadedFile(payload: ProcessFileModel):
    """Zpracuje nahran√Ω soubor a ulo≈æ√≠ do datab√°ze"""
    try:
        if enableLogging:
            logger.info(f"üîÑ Zpracov√°v√°m soubor z pamƒõti: {payload.filename}")

        decoded = base64.b64decode(payload.filedata)

        if payload.filename.endswith(".csv"):
            from io import StringIO
            df = pd.read_csv(StringIO(decoded.decode("utf-8")))
        elif payload.filename.endswith(".xlsx"):
            from io import BytesIO
            df = pd.read_excel(BytesIO(decoded))
        else:
            raise HTTPException(status_code=400, detail="Nepodporovan√Ω form√°t souboru")

        if not requiredColumns.issubset(df.columns):
            missing = requiredColumns - set(df.columns)
            raise HTTPException(status_code=400, detail=f"‚ùå Chybƒõj√≠c√≠ sloupce: {', '.join(missing)}")

        df["date"] = pd.to_datetime(df["date"]).dt.date
        df["hour"] = df["hour"].fillna(24).astype(int)

        df["timestamp"] = df.apply(
            lambda row: (
                datetime.combine(row["date"], datetime.min.time()) +
                (timedelta(hours=23, minutes=59, seconds=59) if row["hour"] == 24 else timedelta(hours=row["hour"]))
            ).isoformat(),
            axis=1
        )

        df = df[["timestamp", "fveProduction", "consumption", "temperature"]]
        database.saveHistoricalData(df)

        return {"message": "‚úÖ Data byla √∫spƒõ≈°nƒõ nahr√°na a ulo≈æena!"}

    except Exception as e:
        if enableLogging:
            logger.exception("‚ùå V√Ωjimka p≈ôi zpracov√°n√≠ souboru")
        raise HTTPException(status_code=500, detail=f"‚ùå Chyba p≈ôi zpracov√°n√≠: {str(e)}")


# ‚öôÔ∏è FVE NASTAVEN√ç ---------------------------------------------------------------

@router.post("/import-settings/")
async def importSettings(solar_params: SolarParams):
    """Ulo≈æ√≠ FVE pole do datab√°ze"""
    updated_panels = []
    for fve in solar_params.fveFields:
        panel_id = database.saveFvePanel(
            panel_id=fve.id if fve.id is not None else None,
            latitude=fve.latitude,
            longitude=fve.longitude,
            tilt=fve.tilt,
            azimuth=fve.azimuth,
            power=fve.power
        )
        updated_panels.append(panel_id)

    return {"message": "‚úÖ Parametry FVE byly √∫spƒõ≈°nƒõ ulo≈æeny", "saved_panels": updated_panels}


@router.get("/get-settings/")
async def getSettings():
    """Vr√°t√≠ v≈°echna ulo≈æen√° FVE data"""
    return database.getFveData()

@router.delete("/delete-fve/{panel_id}")
def delete_fve(panel_id: int):
    return database.deleteFvePanel(panel_id)



# üì° MQTT NASTAVEN√ç --------------------------------------------------------------

@router.get("/get-mqtt-settings/")
def getMqttSettings():
    """Naƒçte aktu√°ln√≠ MQTT nastaven√≠"""
    return mqttListener.loadSettings()


@router.post("/save-mqtt-settings/")
async def saveMqttSettings(data: MqttSettingsModel):
    """Ulo≈æ√≠ MQTT nastaven√≠"""
    try:
        mqttListener.saveMqttSettings(data.dict())
        if enableLogging:
            logger.info("‚úÖ MQTT nastaven√≠ bylo ulo≈æeno")
        return {"message": "‚úÖ MQTT nastaven√≠ bylo ulo≈æeno"}
    except Exception as e:
        if enableLogging:
            logger.exception("‚ùå Chyba p≈ôi ukl√°d√°n√≠ MQTT")
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠")


@router.post("/test-mqtt-connection/")
async def testMqttConnection(data: MqttSettingsModel):
    """Otestuje MQTT p≈ôipojen√≠"""
    return mqttListener.testMqttConnection(data.dict())


# ‚öôÔ∏è OBECN√â NASTAVEN√ç (settings tabulka) -----------------------------------------

@router.post("/get-settings-values/")
async def getSettingsValues(payload: dict):
    """Vr√°t√≠ nastaven√≠ pro zadan√° ID vƒçetnƒõ labelu a placeholderu."""
    ids = payload.get("ids", [])
    try:
        with database.getDb() as db:
            cursor = db.cursor()
            query = f"""
                SELECT id, paramName, value, label, placeHolder
                FROM settings
                WHERE id IN ({','.join('?' for _ in ids)})
            """
            cursor.execute(query, ids)
            rows = cursor.fetchall()
            return [
                {
                    "id": row["id"],
                    "paramName": row["paramName"],
                    "value": row["value"],
                    "label": row["label"],
                    "placeHolder": row["placeHolder"]
                }
                for row in rows
            ]
    except Exception as e:
        if enableLogging:
            logger.exception("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ settings hodnot")
        raise HTTPException(status_code=500, detail=f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠: {str(e)}")


@router.post("/save-settings-values/")
async def saveSettingsValues(payload: dict):
    """Ulo≈æ√≠ v√≠ce hodnot nastaven√≠ najednou."""
    settings = payload.get("settings", [])
    try:
        with database.getDb() as db:
            cursor = db.cursor()
            for setting in settings:
                setting_id = setting["id"]
                value = setting["value"]
                cursor.execute("UPDATE settings SET value = ? WHERE id = ?", (value, setting_id))
            db.commit()
            if enableLogging:
                logger.info("‚úÖ Obecn√© nastaven√≠ bylo ulo≈æeno")
            return {"message": "‚úÖ Nastaven√≠ byla ulo≈æena"}
    except Exception as e:
        if enableLogging:
            logger.exception("‚ùå Chyba p≈ôi ukl√°d√°n√≠ settings")
        raise HTTPException(status_code=500, detail=f"‚ùå Chyba p≈ôi ukl√°d√°n√≠: {str(e)}")
