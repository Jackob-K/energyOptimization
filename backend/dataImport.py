import logging
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import database
import pandas as pd
import os
import base64
import httpx
from pydantic import BaseModel
from typing import List, Optional

# ‚úÖ Nastaven√≠ loggeru
logger = logging.getLogger(__name__)

router = APIRouter()

class FVEData(BaseModel):
    id: Optional[int] = None  # ‚úÖ Voliteln√© ID panelu
    latitude: float
    longitude: float
    tilt: float
    azimuth: float
    power: float

class SolarParams(BaseModel):
    totalPower: float
    fve_fields: List[FVEData]  # ‚úÖ Seznam panel≈Ø FVE

# ‚úÖ Povinn√© sloupce v souboru
REQUIRED_COLUMNS = {"date", "fveProduction", "consumption", "temperatureMax", "temperatureMin"}
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

class FileUploadModel(BaseModel):
    filename: str
    filedata: str  # Base64 encoded file content

@router.post("/upload/")
async def upload_file(file: FileUploadModel):
    """Nahraje soubor do slo≈æky a automaticky spust√≠ jeho zpracov√°n√≠."""
    file_location = os.path.join(UPLOAD_DIR, file.filename)
    
    file_content = base64.b64decode(file.filedata)
    with open(file_location, "wb") as buffer:
        buffer.write(file_content)

    logger.info(f"‚úÖ Soubor {file.filename} nahr√°n do {file_location}")

    # ‚úÖ Opraven√© vol√°n√≠ API na `process-file`
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "http://127.0.0.1:8000/process-file/",
            json={"file_location": file_location}  # Pos√≠l√°me jako JSON objekt
        )

    if response.status_code == 200:
        logger.info(f"‚úÖ Soubor {file.filename} √∫spƒõ≈°nƒõ zpracov√°n!")
    else:
        logger.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ souboru: {response.text}")

    return response.json()

class ProcessFileModel(BaseModel):
    file_location: str

@router.post("/process-file/")
async def process_uploaded_file(payload: ProcessFileModel):
    """Zpracuje soubor, ovƒõ≈ô√≠ spr√°vnost a ulo≈æ√≠ do datab√°ze."""
    file_location = payload.file_location

    if not os.path.exists(file_location):
        raise HTTPException(status_code=400, detail=f"‚ùå Soubor nebyl nalezen: {file_location}")

    logger.info(f"üîÑ Zpracov√°v√°m soubor: {file_location}")

    try:
        if file_location.endswith(".csv"):
            df = pd.read_csv(file_location)
        elif file_location.endswith(".xlsx"):
            df = pd.read_excel(file_location)
        else:
            raise HTTPException(status_code=400, detail="Nepodporovan√Ω form√°t souboru")

        #logger.debug(f"üìä Naƒçten√Ω soubor:\n{df.head()}")  # Debug v√Ωstup
        
        if not REQUIRED_COLUMNS.issubset(df.columns):
            missing_columns = REQUIRED_COLUMNS - set(df.columns)
            raise HTTPException(status_code=400, detail=f"‚ùå Chybƒõj√≠c√≠ sloupce: {', '.join(missing_columns)}")

        df["date"] = pd.to_datetime(df["date"]).dt.date  
        df["hour"] = df.get("hour", 24).fillna(24).astype(int)

        df = df[["date", "hour", "fveProduction", "consumption", "temperatureMax", "temperatureMin"]]

        #logger.info(f"üìä Po √∫pravƒõ dat:\n{df.head()}")  

        # ‚úÖ Ulo≈æen√≠ dat do datab√°ze
        database.save_historical_data(df)

        # ‚úÖ Smaz√°n√≠ souboru po zpracov√°n√≠
        os.remove(file_location)

        return {"message": "‚úÖ Data byla √∫spƒõ≈°nƒõ nahr√°na a ulo≈æena!"}

    except Exception as e:
        #logger.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ souboru: {str(e)}")
        raise HTTPException(status_code=500, detail=f"‚ùå Chyba p≈ôi zpracov√°n√≠: {str(e)}")

@router.post("/import-settings/")
async def import_settings(solar_params: SolarParams):
    """Ulo≈æ√≠ nastaven√≠ FVE a panely do datab√°ze."""
    #logger.info(f"‚úÖ P≈ôijat√° data pro ulo≈æen√≠: {solar_params.dict()}")

    # ‚úÖ Ulo≈æ√≠me nastaven√≠ (totalPower) a z√≠sk√°me settings_id
    settings_id = database.save_settings(solar_params.totalPower)
    #logger.info(f"‚úÖ Ulo≈æen√© settings_id: {settings_id}")

    updated_panels = []

    for fve in solar_params.fve_fields:
        #logger.info(f"üìå Ukl√°d√°m/aktualizuji FVE: {fve}")
        panel_id = database.save_fve_panel(
            panel_id=fve.id if fve.id is not None else None,
            settings_id=settings_id,
            latitude=fve.latitude,
            longitude=fve.longitude,
            tilt=fve.tilt,
            azimuth=fve.azimuth,
            power=fve.power
        )
        #logger.info(f"‚úÖ Panel ID: {panel_id} byl √∫spƒõ≈°nƒõ ulo≈æen.")
        updated_panels.append(panel_id)

    return {"message": "‚úÖ Parametry FVE byly √∫spƒõ≈°nƒõ ulo≈æeny", "saved_panels": updated_panels}
