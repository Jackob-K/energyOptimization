"""
Program naƒçte p≈ôipraven√° data z modulu pro p≈ô√≠pravu dat,
tr√©nuje XGBoost regresn√≠ model s optimalizac√≠ hyperparametr≈Ø,
vyhodnocuje jeho predikce a ukl√°d√° nejlep≈°√≠ model a metriky na disk.

Vstup: Data p≈ôipraven√° funkc√≠ prepareTrainTestData()
V√Ωstup: Ulo≈æen√Ω nejlep≈°√≠ model v adres√°≈ôi Models a metriky v√Ωkonu modelu
Spolupracuje s: backend.database.getDb, backend.usagePrediction.prepareTrainTestData

Zmƒõny n√°zv≈Ø funkc√≠ a promƒõnn√Ωch:
- X_train, X_test, y_train, y_test ponech√°ny dle n√°vaznosti na p≈ô√≠pravu dat
- best_model ‚Üí bestModel
- model_dir ‚Üí modelDir
- model_path ‚Üí modelPath
"""

# Standardn√≠ knihovny
import os

# Extern√≠ knihovny
import joblib
import numpy as np
import pandas as pd
import xgboost as xgb

# Lok√°ln√≠ importy
from backend.usagePrediction.dataProcessor import prepareTrainTestData

# prepareTrainTestData
X_train, X_test, y_train, y_test = prepareTrainTestData()

# gridSearch hyperparametr≈Ø
paramGrid = {
    "subsample": [0.8, 1.0],
    "colsample_bytree": [0.8, 1.0],
    "n_estimators": [100, 200, 300],
    "max_depth": [4, 6, 8],
    "learning_rate": [0.01, 0.05, 0.1]
}

# Inicializace a tr√©nov√°n√≠ modelu
from sklearn.model_selection import GridSearchCV
import xgboost as xgb

model = xgb.XGBRegressor(objective="reg:squarederror", random_state=42)
gridSearch = GridSearchCV(model, paramGrid, scoring="neg_mean_squared_error", cv=5, n_jobs=-1, verbose=2)
gridSearch.fit(X_train, y_train)

# Vyhodnocen√≠ modelu
bestModel = gridSearch.best_estimator_
y_pred = bestModel.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"‚úÖ Data p≈ôipravena! Tr√©novac√≠ sada: {X_train.shape}, Testovac√≠ sada: {X_test.shape}")
print(f"üìå RMSE: {rmse:.2f}")
print(f"üìå R2 sk√≥re: {r2:.4f}")
print(f"üìå Nejlep≈°√≠ hyperparametry: {gridSearch.best_params_}")

# Ulo≈æen√≠ nejlep≈°√≠ho modelu
import os
import joblib

modelDir = "backend/usagePrediction/Models"
os.makedirs(modelDir, exist_ok=True)

modelPath = os.path.join(modelDir, "xgboost_model.pkl")
bestModel = gridSearch.best_estimator_
joblib.dump(bestModel, modelPath)
print(f"‚úÖ Nejlep≈°√≠ model ulo≈æen jako {modelPath}")

# Ulo≈æen√≠ metrik
metrics = {"RMSE": rmse, "R2": r2}
metricsPath = os.path.join(modelDir, "model_metrics.pkl")
joblib.dump(metrics, metricsPath)
print(f"‚úÖ Metriky modelu ulo≈æeny jako {metricsPath}")
