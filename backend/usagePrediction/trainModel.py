"""
Program naƒçte p≈ôipraven√° data z modulu pro p≈ô√≠pravu dat,
tr√©nuje XGBoost regresn√≠ model s optimalizac√≠ hyperparametr≈Ø,
vyhodnocuje jeho predikce a ukl√°d√° nejlep≈°√≠ model a metriky na disk.

Vstup: Data p≈ôipraven√° funkc√≠ prepareTrainTestData()
V√Ωstup: Ulo≈æen√Ω nejlep≈°√≠ model v adres√°≈ôi Models a metriky v√Ωkonu modelu
Spolupracuje s: backend.database.getDb, backend.usagePrediction.prepareTrainTestData
"""

# Standardn√≠ knihovny
import os

# Extern√≠ knihovny
import joblib
import numpy as np
import xgboost as xgb
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score

# Lok√°ln√≠ importy
from backend.usagePrediction.dataProcessor import prepareTrainTestData

# Naƒçten√≠ tr√©novac√≠ch/testovac√≠ch dat
xTrain, xTest, yTrain, yTest = prepareTrainTestData()

# Definice gridu pro hled√°n√≠ nejlep≈°√≠ch hyperparametr≈Ø
paramGrid = {
    "subsample": [0.8, 1.0],
    "colsample_bytree": [0.8, 1.0],
    "n_estimators": [100, 200, 300],
    "max_depth": [4, 6, 8],
    "learning_rate": [0.01, 0.05, 0.1]
}

# Inicializace modelu a grid search
model = xgb.XGBRegressor(objective="reg:squarederror", random_state=42)
gridSearch = GridSearchCV(
    model,
    paramGrid,
    scoring="neg_mean_squared_error",
    cv=5,
    n_jobs=-1,
    verbose=2
)

# Tr√©nov√°n√≠ modelu
gridSearch.fit(xTrain, yTrain)

# V√Ωbƒõr nejlep≈°√≠ho modelu a predikce
bestModel = gridSearch.best_estimator_
yPred = bestModel.predict(xTest)

# V√Ωpoƒçet metrik
rmse = np.sqrt(mean_squared_error(yTest, yPred))
r2 = r2_score(yTest, yPred)

print(f"‚úÖ Data p≈ôipravena! Tr√©novac√≠ sada: {xTrain.shape}, Testovac√≠ sada: {xTest.shape}")
print(f"üìå RMSE: {rmse:.2f}")
print(f"üìå R2 sk√≥re: {r2:.4f}")
print(f"üìå Nejlep≈°√≠ hyperparametry: {gridSearch.best_params_}")

# Ulo≈æen√≠ modelu a metrik
modelDir = "backend/usagePrediction/Models"
os.makedirs(modelDir, exist_ok=True)

modelPath = os.path.join(modelDir, "xgboostModel.pkl")
joblib.dump(bestModel, modelPath)
print(f"‚úÖ Nejlep≈°√≠ model ulo≈æen jako {modelPath}")

metrics = {"RMSE": rmse, "R2": r2}
metricsPath = os.path.join(modelDir, "modelMetrics.pkl")
joblib.dump(metrics, metricsPath)
print(f"‚úÖ Metriky modelu ulo≈æeny jako {metricsPath}")
