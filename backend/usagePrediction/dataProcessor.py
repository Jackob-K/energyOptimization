import pandas as pd
import numpy as np
from backend.database import get_db

def get_historical_data():
    """Naƒçte historick√° data z datab√°ze a zajist√≠ spr√°vn√© datov√© typy."""
    with get_db() as conn:
        query = """
        SELECT date, hour, consumption, temperature
        FROM energyData
        WHERE hour < 24
        ORDER BY date, hour
        """
        df = pd.read_sql_query(query, conn)

    # ‚úÖ Oprava typ≈Ø ‚Äì v≈°echny hodnoty p≈ôevedeme na ƒç√≠sla
    df["consumption"] = pd.to_numeric(df["consumption"], errors="coerce")
    df["temperature"] = pd.to_numeric(df["temperature"], errors="coerce")

    df["date"] = pd.to_datetime(df["date"])  # P≈ôevod datumu na datetime
    df["year"] = df["date"].dt.year  # P≈ôid√°n√≠ sloupce s rokem

    return df

def add_lag_features(df, lags=[1, 2, 3, 24]):
    """P≈ôid√° posunut√© (lag) hodnoty spot≈ôeby."""
    for lag in lags:
        df[f"consumption_lag_{lag}"] = df["consumption"].shift(lag)
    return df

def add_rolling_features(df, window_sizes=[3, 6, 12, 24]):
    """P≈ôid√° klouzav√© pr≈Ømƒõry spot≈ôeby."""
    for window in window_sizes:
        df[f"consumption_roll_{window}h"] = df["consumption"].rolling(window=window, min_periods=1).mean()
    return df

def add_temperature_features(df, lags=[1, 2, 3, 24], window_sizes=[3, 6, 12, 24]):
    """P≈ôid√° lagy a klouzav√© pr≈Ømƒõry teploty."""
    for lag in lags:
        df[f"temperature_lag_{lag}"] = df["temperature"].shift(lag)

    for window in window_sizes:
        df[f"temperature_roll_{window}h"] = df["temperature"].rolling(window=window, min_periods=1).mean()

    return df

def add_time_features(df):
    """P≈ôid√° ƒçasov√© promƒõnn√© (den v t√Ωdnu, mƒõs√≠c, pracovn√≠ den)."""
    df["month"] = df["date"].dt.month
    df["day_of_week"] = df["date"].dt.weekday
    df["is_weekend"] = df["day_of_week"].isin([5, 6]).astype(int)
    return df

def handle_missing_values(df):
    """Vypln√≠ chybƒõj√≠c√≠ hodnoty line√°rn√≠ interpolac√≠."""
    df.interpolate(method="linear", inplace=True)
    return df

def prepare_train_test_data():
    """P≈ôiprav√≠ data pro tr√©nov√°n√≠ modelu ML s dƒõlen√≠m podle roku."""
    df = get_historical_data()

    # ‚úÖ P≈ôid√°me feature engineering prvky
    df = add_lag_features(df)
    df = add_rolling_features(df)
    df = add_temperature_features(df)
    df = add_time_features(df)

    # ‚úÖ Odstran√≠me ≈ô√°dky s NaN hodnotami (zp≈Øsoben√© lagy)
    df.dropna(inplace=True)

    # ‚úÖ Vybereme relevantn√≠ promƒõnn√©
    features = [col for col in df.columns if col not in ["date", "consumption", "year"]]
    X = df[features]
    y = df["consumption"]

    # ‚úÖ Rozdƒõlen√≠ tr√©novac√≠ch a testovac√≠ch dat podle roku
    X_train = X[df["year"] < 2025]  # Tr√©nujeme na v≈°ech datech p≈ôed 2025
    y_train = y[df["year"] < 2025]
    X_test = X[df["year"] == 2025]  # Testujeme na datech z roku 2025
    y_test = y[df["year"] == 2025]

    print(f"‚úÖ Data p≈ôipravena! Tr√©novac√≠ sada: {X_train.shape}, Testovac√≠ sada: {X_test.shape}")
    print(f"üìå Chybƒõj√≠c√≠ hodnoty po opravƒõ:\n{X_train.isnull().sum()}")

    return X_train, X_test, y_train, y_test

import pandas as pd
from backend.database import get_db

def update_processed_data():
    """Naƒçte data z energyData, provede v√Ωpoƒçty, zaokrouhl√≠ je a ulo≈æ√≠ do processedData."""
    with get_db() as conn:
        # 1Ô∏è‚É£ Naƒç√≠st data z `energyData`
        query = """
        SELECT date, hour, consumption, temperature
        FROM energyData
        WHERE hour < 24  -- Nebereme souhrnnou hodinu 24
        ORDER BY date, hour;
        """
        df = pd.read_sql_query(query, conn)

    # 2Ô∏è‚É£ P≈ôev√©st `date` na datetime form√°t
    df["date"] = pd.to_datetime(df["date"])

    # 3Ô∏è‚É£ P≈ôidat lagy a klouzav√© pr≈Ømƒõry
    df = add_lag_features(df)
    df = add_rolling_features(df)
    df = add_temperature_features(df)

    # 4Ô∏è‚É£ P≈ôidat ƒçasov√© promƒõnn√©
    df["month"] = df["date"].dt.month
    df["day_of_week"] = df["date"].dt.weekday
    df["is_weekend"] = df["day_of_week"].isin([5, 6]).astype(int)

    # 5Ô∏è‚É£ Vyplnit chybƒõj√≠c√≠ hodnoty (backfill pro lagy)
    df.bfill(inplace=True)

    # 6Ô∏è‚É£ **Zaokrouhlen√≠ hodnot**
    df = df.round({
        "consumption": 2,
        "consumption_lag_1": 2, "consumption_lag_2": 2, "consumption_lag_3": 2, "consumption_lag_24": 2,
        "consumption_roll_3h": 2, "consumption_roll_6h": 2, "consumption_roll_12h": 2, "consumption_roll_24h": 2,
        "temperature": 1, "temperature_lag_1": 1, "temperature_lag_2": 1, "temperature_lag_3": 1, "temperature_lag_24": 1,
        "temperature_roll_3h": 1, "temperature_roll_6h": 1, "temperature_roll_12h": 1, "temperature_roll_24h": 1
    })

    # 7Ô∏è‚É£ Ulo≈æit data do `processedData`
    with get_db() as conn:
        cursor = conn.cursor()
        for _, row in df.iterrows():
            query = """
            INSERT INTO processedData (
                date, hour, consumption,
                consumption_lag_1, consumption_lag_2, consumption_lag_3, consumption_lag_24,
                consumption_roll_3h, consumption_roll_6h, consumption_roll_12h, consumption_roll_24h,
                temperature, temperature_lag_1, temperature_lag_2, temperature_lag_3, temperature_lag_24,
                temperature_roll_3h, temperature_roll_6h, temperature_roll_12h, temperature_roll_24h,
                month, day_of_week, is_weekend
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(date, hour) DO UPDATE SET
                consumption=excluded.consumption,
                consumption_lag_1=excluded.consumption_lag_1,
                consumption_lag_2=excluded.consumption_lag_2,
                consumption_lag_3=excluded.consumption_lag_3,
                consumption_lag_24=excluded.consumption_lag_24,
                consumption_roll_3h=excluded.consumption_roll_3h,
                consumption_roll_6h=excluded.consumption_roll_6h,
                consumption_roll_12h=excluded.consumption_roll_12h,
                consumption_roll_24h=excluded.consumption_roll_24h,
                temperature=excluded.temperature,
                temperature_lag_1=excluded.temperature_lag_1,
                temperature_lag_2=excluded.temperature_lag_2,
                temperature_lag_3=excluded.temperature_lag_3,
                temperature_lag_24=excluded.temperature_lag_24,
                temperature_roll_3h=excluded.temperature_roll_3h,
                temperature_roll_6h=excluded.temperature_roll_6h,
                temperature_roll_12h=excluded.temperature_roll_12h,
                temperature_roll_24h=excluded.temperature_roll_24h,
                month=excluded.month,
                day_of_week=excluded.day_of_week,
                is_weekend=excluded.is_weekend;
            """
            cursor.execute(query, (
                row["date"].strftime("%Y-%m-%d"),  # ‚úÖ Oprava: P≈ôevod na string
                row["hour"], row["consumption"],
                row["consumption_lag_1"], row["consumption_lag_2"], row["consumption_lag_3"], row["consumption_lag_24"],
                row["consumption_roll_3h"], row["consumption_roll_6h"], row["consumption_roll_12h"], row["consumption_roll_24h"],
                row["temperature"], row["temperature_lag_1"], row["temperature_lag_2"], row["temperature_lag_3"], row["temperature_lag_24"],
                row["temperature_roll_3h"], row["temperature_roll_6h"], row["temperature_roll_12h"], row["temperature_roll_24h"],
                row["month"], row["day_of_week"], row["is_weekend"]
            ))
        conn.commit()

if __name__ == "__main__":
    update_processed_data()
    print("‚úÖ Tabulka processedData byla √∫spƒõ≈°nƒõ aktualizov√°na!")
