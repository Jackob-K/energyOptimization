import paho.mqtt.client as mqtt
import json
import logging
import sqlite3
from fastapi import APIRouter, HTTPException
from database import get_db

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Cesta k datab√°zi
DB_PATH = "backend/database.db"

# API router pro MQTT slu≈æby
router = APIRouter()

# Glob√°ln√≠ promƒõnn√© pro MQTT klienta
mqtt_client = None
settings = {}

def load_settings():
    """ Naƒç√≠t√° aktu√°ln√≠ MQTT nastaven√≠ z datab√°ze """
    global settings
    settings = {
        "broker": "test.mosquitto.org",
        "port": 1883,
        "topic": "energy/data",
        "username": None,
        "password": None
    }

    try:
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute("SELECT id, value FROM settings WHERE id BETWEEN 11 AND 15")
            rows = cursor.fetchall()

            for row_id, value in rows:
                if row_id == 11:
                    settings["broker"] = value
                elif row_id == 12:
                    settings["port"] = int(value) if value.isdigit() else 1883
                elif row_id == 13:
                    settings["topic"] = value
                elif row_id == 14:
                    settings["username"] = value if value else None
                elif row_id == 15:
                    settings["password"] = value if value else None

    except sqlite3.Error as e:
        logging.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ MQTT nastaven√≠ z datab√°ze: {e}")

    return settings

def save_mqtt_settings(new_settings):
    """ Ulo≈æ√≠ nov√© MQTT nastaven√≠ do datab√°ze a restartuje p≈ôipojen√≠ pouze pokud do≈°lo ke zmƒõnƒõ """
    global settings
    if settings == new_settings:
        logging.info("‚ö†Ô∏è Nastaven√≠ MQTT se nezmƒõnilo, restart nen√≠ nutn√Ω.")
        return {"message": "‚ö†Ô∏è Nastaven√≠ z≈Østalo stejn√©."}

    try:
        with get_db() as db:
            cursor = db.cursor()
            
            for key, value in new_settings.items():
                setting_id = {
                    "broker": 11,
                    "port": 12,
                    "topic": 13,
                    "username": 14,
                    "password": 15
                }.get(key)

                if setting_id:
                    # ‚úÖ Pou≈æijeme INSERT ON CONFLICT pro spr√°vn√© ulo≈æen√≠
                    cursor.execute("""
                        INSERT INTO settings (id, value) VALUES (?, ?)
                        ON CONFLICT(id) DO UPDATE SET value = excluded.value;
                    """, (setting_id, str(value)))

            db.commit()

        logging.info("‚úÖ MQTT nastaven√≠ bylo √∫spƒõ≈°nƒõ ulo≈æeno")
        settings = new_settings  # Aktualizujeme glob√°ln√≠ promƒõnnou
        restart_mqtt_client()  # Restartujeme jen p≈ôi zmƒõnƒõ
        return {"message": "‚úÖ MQTT nastaven√≠ bylo ulo≈æeno"}

    except sqlite3.Error as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ MQTT nastaven√≠: {e}")
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze")


def test_mqtt_connection(settings_data):
    """ Otestuje p≈ôipojen√≠ k MQTT brokeru """
    try:
        test_client = mqtt.Client()
        if settings_data["username"] and settings_data["password"]:
            test_client.username_pw_set(settings_data["username"], settings_data["password"])

        test_client.connect(settings_data["broker"], int(settings_data["port"]), 60)
        test_client.disconnect()
        return {"message": "‚úÖ P≈ôipojen√≠ k MQTT brokeru √∫spƒõ≈°n√©"}
    
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi testov√°n√≠ MQTT p≈ôipojen√≠: {e}")
        return {"message": "‚ùå P≈ôipojen√≠ selhalo", "error": str(e)}


def restart_mqtt_client():
    """ Restartuje MQTT klienta s nov√Ωm nastaven√≠m """
    global mqtt_client
    settings = load_settings()

    if mqtt_client:
        mqtt_client.disconnect()

    mqtt_client = mqtt.Client()
    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message
    mqtt_client.on_disconnect = on_disconnect

    if settings["username"] and settings["password"]:
        mqtt_client.username_pw_set(settings["username"], settings["password"])

    try:
        logging.info("üîÑ Restart MQTT klienta s nov√Ωm nastaven√≠m...")
        mqtt_client.connect(settings["broker"], settings["port"], 60)
        mqtt_client.loop_start()
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi restartov√°n√≠ MQTT klienta: {e}")

def on_connect(client, userdata, flags, rc):
    """ Callback p≈ôi p≈ôipojen√≠ k brokeru """
    if rc == 0:
        logging.info("‚úÖ MQTT p≈ôipojeno.")
        client.subscribe(settings["topic"])
    else:
        logging.error(f"‚ùå Chyba p≈ôi p≈ôipojen√≠, k√≥d: {rc}")

def on_message(client, userdata, msg):
    """ Callback p≈ôi p≈ôijet√≠ zpr√°vy z MQTT """
    raw_payload = msg.payload.decode("utf-8")  # P≈ôevod byte zpr√°vy na string
    logging.info(f"üì© SUROV√Å P≈òIJAT√Å ZPR√ÅVA: {raw_payload}")  # ‚úÖ V√Ωpis raw zpr√°vy

    # üõ† Pokus√≠me se extrahovat JSON ƒç√°st ze zpr√°vy
    try:
        json_start = raw_payload.find("{")  # Najdeme zaƒç√°tek JSONu
        if json_start != -1:
            clean_json = raw_payload[json_start:]  # O≈ô√≠zneme text p≈ôed JSONem
        else:
            clean_json = raw_payload  # Pokud nen√≠ nalezen '{', pou≈æijeme cel√Ω text

        logging.info(f"üõ† OPRAVEN√Å ZPR√ÅVA PRO DEK√ìDOV√ÅN√ç: {clean_json}")  # ‚úÖ V√Ωpis opraven√© zpr√°vy

        # P≈ôeveden√≠ na Python slovn√≠k
        data = json.loads(clean_json)

        logging.info(f"üì• P≈òEVEDEN√Å JSON ZPR√ÅVA: {json.dumps(data, indent=2)}")  # ‚úÖ Form√°tovan√Ω v√Ωstup JSON

        # ‚úÖ Ovƒõ≈ôen√≠, zda zpr√°va obsahuje po≈æadovan√° pole
        required_keys = {"date", "hour", "fveProduction", "consumption", "temperature"}
        if required_keys.issubset(data.keys()):
            logging.info("‚úÖ ZPR√ÅVA OBSAHUJE V≈†ECHNA PO≈ΩADOVAN√Å DATA!")
            save_to_database(data)  # Ulo≈æit do DB
        else:
            missing_keys = required_keys - set(data.keys())
            logging.warning(f"‚ö†Ô∏è CHYBƒöJ√çC√ç DATA VE ZPR√ÅVƒö: {missing_keys}")

    except json.JSONDecodeError as e:
        logging.error(f"‚ùå CHYBA P≈òI DEK√ìDOV√ÅN√ç JSON: {e}")


def save_to_database(data):
    """ Ulo≈æen√≠ p≈ôijat√Ωch dat do tabulky energyData """
    try:
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute("""
                INSERT INTO energyData (date, hour, fveProduction, consumption, temperature) 
                VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(date, hour) DO UPDATE SET
                fveProduction = excluded.fveProduction,
                consumption = excluded.consumption,
                temperature = excluded.temperature
            """, (data["date"], data["hour"], data["fveProduction"], data["consumption"], data["temperature"]))

            db.commit()

        logging.info(f"‚úÖ Data ulo≈æena: {data}")

    except sqlite3.Error as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze: {e}")

def on_disconnect(client, userdata, rc):
    """ Callback p≈ôi odpojen√≠ """
    logging.warning("‚ö†Ô∏è MQTT odpojeno.")

@router.get("/get-mqtt-settings/")
def get_mqtt_settings():
    """ API endpoint pro naƒçten√≠ MQTT nastaven√≠ """
    return load_settings()  # ‚úÖ Nyn√≠ je to synchronn√≠ a spr√°vnƒõ volan√©

@router.post("/save-mqtt-settings/")
async def save_mqtt_settings_api(data: dict):
    """ API endpoint pro ulo≈æen√≠ MQTT nastaven√≠ """
    return save_mqtt_settings(data)

@router.post("/test-mqtt-connection/")
async def test_mqtt_connection_api(data: dict):
    """ API endpoint pro test p≈ôipojen√≠ """
    return test_mqtt_connection(data)

if __name__ == "__main__":
    restart_mqtt_client()